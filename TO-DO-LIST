import tkinter as tk
from tkinter import messagebox
import json
import os

class Task:
    def __init__(self, description, completed=False):
        self.description = description
        self.completed = completed

    def __repr__(self):
        status = "Done" if self.completed else "Pending"
        return f"[{status}] {self.description}"

class TodoApp:
    def __init__(self, filename="tasks.json"):
        self.filename = filename
        self.tasks = self.load_tasks()

    def load_tasks(self):
        if os.path.exists(self.filename):
            with open(self.filename, "r") as file:
                tasks_data = json.load(file)
                return [Task(**task) for task in tasks_data]
        return []

    def save_tasks(self):
        with open(self.filename, "w") as file:
            tasks_data = [task.__dict__ for task in self.tasks]
            json.dump(tasks_data, file)

    def add_task(self, description):
        task = Task(description)
        self.tasks.append(task)
        self.save_tasks()

    def update_task(self, task_id, description):
        self.tasks[task_id].description = description
        self.save_tasks()

    def delete_task(self, task_id):
        self.tasks.pop(task_id)
        self.save_tasks()

    def mark_task(self, task_id, completed=True):
        self.tasks[task_id].completed = completed
        self.save_tasks()

class TodoGUI:
    def __init__(self, root):
        self.app = TodoApp()
        self.root = root
        self.root.title("To-Do List Application")

        self.frame = tk.Frame(root)
        self.frame.pack(pady=10)

        self.task_listbox = tk.Listbox(self.frame, width=50, height=15)
        self.task_listbox.pack(side=tk.LEFT, fill=tk.BOTH)
        self.task_listbox.bind("<Double-1>", self.on_task_double_click)

        self.scrollbar = tk.Scrollbar(self.frame, orient=tk.VERTICAL, command=self.task_listbox.yview)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.task_listbox.config(yscrollcommand=self.scrollbar.set)

        self.entry = tk.Entry(root, width=40)
        self.entry.pack(pady=5)

        self.add_button = tk.Button(root, text="Add Task", command=self.add_task)
        self.add_button.pack(pady=5)

        self.update_button = tk.Button(root, text="Update Task", command=self.update_task)
        self.update_button.pack(pady=5)

        self.delete_button = tk.Button(root, text="Delete Task", command=self.delete_task)
        self.delete_button.pack(pady=5)

        self.complete_button = tk.Button(root, text="Mark as Complete", command=self.mark_task_complete)
        self.complete_button.pack(pady=5)

        self.incomplete_button = tk.Button(root, text="Mark as Incomplete", command=self.mark_task_incomplete)
        self.incomplete_button.pack(pady=5)

        self.load_tasks()

    def load_tasks(self):
        self.task_listbox.delete(0, tk.END)
        for i, task in enumerate(self.app.tasks):
            self.task_listbox.insert(tk.END, f"{i + 1}. {task}")

    def add_task(self):
        description = self.entry.get()
        if description:
            self.app.add_task(description)
            self.load_tasks()
            self.entry.delete(0, tk.END)

    def update_task(self):
        try:
            selected_index = self.task_listbox.curselection()[0]
            new_description = self.entry.get()
            if new_description:
                self.app.update_task(selected_index, new_description)
                self.load_tasks()
                self.entry.delete(0, tk.END)
        except IndexError:
            messagebox.showwarning("Warning", "Please select a task to update")

    def delete_task(self):
        try:
            selected_index = self.task_listbox.curselection()[0]
            self.app.delete_task(selected_index)
            self.load_tasks()
        except IndexError:
            messagebox.showwarning("Warning", "Please select a task to delete")

    def mark_task_complete(self):
        try:
            selected_index = self.task_listbox.curselection()[0]
            self.app.mark_task(selected_index, True)
            self.load_tasks()
        except IndexError:
            messagebox.showwarning("Warning", "Please select a task to mark as complete")

    def mark_task_incomplete(self):
        try:
            selected_index = self.task_listbox.curselection()[0]
            self.app.mark_task(selected_index, False)
            self.load_tasks()
        except IndexError:
            messagebox.showwarning("Warning", "Please select a task to mark as incomplete")

    def on_task_double_click(self, event):
        try:
            selected_index = self.task_listbox.curselection()[0]
            task = self.app.tasks[selected_index]
            self.entry.delete(0, tk.END)
            self.entry.insert(0, task.description)
        except IndexError:
            pass

if __name__ == "__main__":
    root = tk.Tk()
    gui = TodoGUI(root)
    root.mainloop()
